{
  "9hf6n3": {
    "CLI": "microlink https://github.com/microlinkhq",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://github.com/microlinkhq\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://github.com/microlinkhq')",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://github.com/microlinkhq\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://github.com/microlinkhq\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://github.com/microlinkhq\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://github.com/microlinkhq\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "js2otg": {
    "CLI": "microlink https://github.com/microlinkhq --api-key YOUR_API_TOKEN",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -H \"x-api-key: YOUR_API_TOKEN\" \\\n  -d \"url=https://github.com/microlinkhq\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://github.com/microlinkhq', {\n  apiKey: \"YOUR_API_TOKEN\"\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://github.com/microlinkhq\"\n}\n\nheaders = {\n    \"x-api-key\": \"YOUR_API_TOKEN\"\n}\n\nresponse = requests.get(url, params=querystring, headers=headers)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://github.com/microlinkhq\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nrequest['x-api-key'] = \"YOUR_API_TOKEN\"\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://github.com/microlinkhq\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\",\n    CURLOPT_HTTPHEADER => [\n        \"x-api-key: YOUR_API_TOKEN\"\n    ]\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://github.com/microlinkhq\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    req.Header.Set(\"x-api-key\", \"YOUR_API_TOKEN\")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "fanm9x": {
    "CLI": "microlink https://github.com/microlinkhq&headers.userAgent=googlebot",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://github.com/microlinkhq\" \\\n  -d \"headers.userAgent=googlebot\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://github.com/microlinkhq', {\n  headers: {\n    userAgent: \"googlebot\"\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://github.com/microlinkhq\",\n    \"headers.userAgent\": \"googlebot\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://github.com/microlinkhq\",\n  headers.userAgent: \"googlebot\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://github.com/microlinkhq\",\n    \"headers.userAgent\" => \"googlebot\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://github.com/microlinkhq\")\n    q.Set(\"headers.userAgent\", \"googlebot\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "d59vcg": {
    "CLI": "microlink https://github.com/microlinkhq&headers.apiKey=YOUR_API_TOKEN&headers.userAgent=googlebot",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://github.com/microlinkhq\" \\\n  -d \"headers.apiKey=YOUR_API_TOKEN\" \\\n  -d \"headers.userAgent=googlebot\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://github.com/microlinkhq', {\n  headers: {\n    apiKey: \"YOUR_API_TOKEN\",\n    userAgent: \"googlebot\"\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://github.com/microlinkhq\",\n    \"headers.apiKey\": \"YOUR_API_TOKEN\",\n    \"headers.userAgent\": \"googlebot\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://github.com/microlinkhq\",\n  headers.apiKey: \"YOUR_API_TOKEN\",\n  headers.userAgent: \"googlebot\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://github.com/microlinkhq\",\n    \"headers.apiKey\" => \"YOUR_API_TOKEN\",\n    \"headers.userAgent\" => \"googlebot\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://github.com/microlinkhq\")\n    q.Set(\"headers.apiKey\", \"YOUR_API_TOKEN\")\n    q.Set(\"headers.userAgent\", \"googlebot\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "8ajj3g": {
    "CLI": "microlink https://github.com/microlinkhq&headers.user_agent=googlebot",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://github.com/microlinkhq\" \\\n  -d \"headers.user_agent=googlebot\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://github.com/microlinkhq', {\n  headers: {\n    user_agent: \"googlebot\"\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://github.com/microlinkhq\",\n    \"headers.user_agent\": \"googlebot\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://github.com/microlinkhq\",\n  headers.user_agent: \"googlebot\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://github.com/microlinkhq\",\n    \"headers.user_agent\" => \"googlebot\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://github.com/microlinkhq\")\n    q.Set(\"headers.user_agent\", \"googlebot\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "j21fp8": {
    "CLI": "microlink https://www.youtube.com&adblock",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://www.youtube.com\" \\\n  -d \"adblock=true\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://www.youtube.com', {\n  adblock: true\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://www.youtube.com\",\n    \"adblock\": \"true\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://www.youtube.com\",\n  adblock: \"true\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://www.youtube.com\",\n    \"adblock\" => \"true\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://www.youtube.com\")\n    q.Set(\"adblock\", \"true\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "aftq8d": {
    "CLI": "microlink https://vercel.com&screenshot",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://vercel.com\" \\\n  -d \"screenshot=true\" \\\n  -d \"animations=false\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://vercel.com', {\n  screenshot: true,\n  animations: false\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://vercel.com\",\n    \"screenshot\": \"true\",\n    \"animations\": \"false\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://vercel.com\",\n  screenshot: \"true\",\n  animations: \"false\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://vercel.com\",\n    \"screenshot\" => \"true\",\n    \"animations\" => \"false\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://vercel.com\")\n    q.Set(\"screenshot\", \"true\")\n    q.Set(\"animations\", \"false\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "8vlbxq": {
    "CLI": "microlink https://open.spotify.com/track/1W2919zs8SBCLTrOB1ftQT&audio",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://open.spotify.com/track/1W2919zs8SBCLTrOB1ftQT\" \\\n  -d \"audio=true\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://open.spotify.com/track/1W2919zs8SBCLTrOB1ftQT', {\n  audio: true\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://open.spotify.com/track/1W2919zs8SBCLTrOB1ftQT\",\n    \"audio\": \"true\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://open.spotify.com/track/1W2919zs8SBCLTrOB1ftQT\",\n  audio: \"true\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://open.spotify.com/track/1W2919zs8SBCLTrOB1ftQT\",\n    \"audio\" => \"true\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://open.spotify.com/track/1W2919zs8SBCLTrOB1ftQT\")\n    q.Set(\"audio\", \"true\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "j9yhaj": {
    "CLI": "microlink https://microlink.io&screenshot&click=#features",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://microlink.io\" \\\n  -d \"screenshot=true\" \\\n  -d \"click=#features\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://microlink.io', {\n  screenshot: true,\n  click: \"#features\"\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://microlink.io\",\n    \"screenshot\": \"true\",\n    \"click\": \"#features\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://microlink.io\",\n  screenshot: \"true\",\n  click: \"#features\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://microlink.io\",\n    \"screenshot\" => \"true\",\n    \"click\" => \"#features\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://microlink.io\")\n    q.Set(\"screenshot\", \"true\")\n    q.Set(\"click\", \"#features\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "m02g0t": {
    "CLI": "microlink https://googlechromelabs.github.io/dark-mode-toggle/demo&screenshot&colorScheme=dark",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://googlechromelabs.github.io/dark-mode-toggle/demo\" \\\n  -d \"screenshot=true\" \\\n  -d \"colorScheme=dark\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://googlechromelabs.github.io/dark-mode-toggle/demo', {\n  screenshot: true,\n  colorScheme: \"dark\"\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://googlechromelabs.github.io/dark-mode-toggle/demo\",\n    \"screenshot\": \"true\",\n    \"colorScheme\": \"dark\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://googlechromelabs.github.io/dark-mode-toggle/demo\",\n  screenshot: \"true\",\n  colorScheme: \"dark\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://googlechromelabs.github.io/dark-mode-toggle/demo\",\n    \"screenshot\" => \"true\",\n    \"colorScheme\" => \"dark\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://googlechromelabs.github.io/dark-mode-toggle/demo\")\n    q.Set(\"screenshot\", \"true\")\n    q.Set(\"colorScheme\", \"dark\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "eoky7h": {
    "CLI": "microlink https://kikobeats.com&data.avatar.selector=#avatar&data.avatar.type=image&data.avatar.attr=src",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://kikobeats.com\" \\\n  -d \"data.avatar.selector=#avatar\" \\\n  -d \"data.avatar.type=image\" \\\n  -d \"data.avatar.attr=src\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://kikobeats.com', {\n  data: {\n    avatar: {\n      selector: \"#avatar\",\n      type: \"image\",\n      attr: \"src\"\n    }\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://kikobeats.com\",\n    \"data.avatar.selector\": \"#avatar\",\n    \"data.avatar.type\": \"image\",\n    \"data.avatar.attr\": \"src\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://kikobeats.com\",\n  data.avatar.selector: \"#avatar\",\n  data.avatar.type: \"image\",\n  data.avatar.attr: \"src\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://kikobeats.com\",\n    \"data.avatar.selector\" => \"#avatar\",\n    \"data.avatar.type\" => \"image\",\n    \"data.avatar.attr\" => \"src\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://kikobeats.com\")\n    q.Set(\"data.avatar.selector\", \"#avatar\")\n    q.Set(\"data.avatar.type\", \"image\")\n    q.Set(\"data.avatar.attr\", \"src\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "x1e023": {
    "CLI": "microlink https://microlink.io&screenshot&device=iPad",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://microlink.io\" \\\n  -d \"screenshot=true\" \\\n  -d \"device=iPad\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://microlink.io', {\n  screenshot: true,\n  device: \"iPad\"\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://microlink.io\",\n    \"screenshot\": \"true\",\n    \"device\": \"iPad\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://microlink.io\",\n  screenshot: \"true\",\n  device: \"iPad\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://microlink.io\",\n    \"screenshot\" => \"true\",\n    \"device\" => \"iPad\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://microlink.io\")\n    q.Set(\"screenshot\", \"true\")\n    q.Set(\"device\", \"iPad\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "6k0s62": {
    "CLI": "microlink https://news.ycombinator.com/item?id=13713480&screenshot&embed=screenshot.url",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://news.ycombinator.com/item?id=13713480\" \\\n  -d \"screenshot=true\" \\\n  -d \"embed=screenshot.url\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://news.ycombinator.com/item?id=13713480', {\n  screenshot: true,\n  embed: \"screenshot.url\"\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://news.ycombinator.com/item?id=13713480\",\n    \"screenshot\": \"true\",\n    \"embed\": \"screenshot.url\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://news.ycombinator.com/item?id=13713480\",\n  screenshot: \"true\",\n  embed: \"screenshot.url\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://news.ycombinator.com/item?id=13713480\",\n    \"screenshot\" => \"true\",\n    \"embed\" => \"screenshot.url\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://news.ycombinator.com/item?id=13713480\")\n    q.Set(\"screenshot\", \"true\")\n    q.Set(\"embed\", \"screenshot.url\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "ip6605": {
    "CLI": "microlink https://news.ycombinator.com/item?id=13713480&screenshot&embed=title",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://news.ycombinator.com/item?id=13713480\" \\\n  -d \"screenshot=true\" \\\n  -d \"embed=title\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://news.ycombinator.com/item?id=13713480', {\n  screenshot: true,\n  embed: \"title\"\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://news.ycombinator.com/item?id=13713480\",\n    \"screenshot\": \"true\",\n    \"embed\": \"title\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://news.ycombinator.com/item?id=13713480\",\n  screenshot: \"true\",\n  embed: \"title\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://news.ycombinator.com/item?id=13713480\",\n    \"screenshot\" => \"true\",\n    \"embed\" => \"title\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://news.ycombinator.com/item?id=13713480\")\n    q.Set(\"screenshot\", \"true\")\n    q.Set(\"embed\", \"title\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "yp7sig": {
    "CLI": "microlink https://padlet.com/padlets/mjl7vtq8a26g/exports/print&pdf&filename=solar-system",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://padlet.com/padlets/mjl7vtq8a26g/exports/print\" \\\n  -d \"pdf=true\" \\\n  -d \"filename=solar-system\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://padlet.com/padlets/mjl7vtq8a26g/exports/print', {\n  pdf: true,\n  filename: \"solar-system\"\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://padlet.com/padlets/mjl7vtq8a26g/exports/print\",\n    \"pdf\": \"true\",\n    \"filename\": \"solar-system\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://padlet.com/padlets/mjl7vtq8a26g/exports/print\",\n  pdf: \"true\",\n  filename: \"solar-system\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://padlet.com/padlets/mjl7vtq8a26g/exports/print\",\n    \"pdf\" => \"true\",\n    \"filename\" => \"solar-system\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://padlet.com/padlets/mjl7vtq8a26g/exports/print\")\n    q.Set(\"pdf\", \"true\")\n    q.Set(\"filename\", \"solar-system\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "j9lw1n": {
    "CLI": "microlink https://microlink.io&function='({ page }) => page.evaluate(\"jQuery.fn.jquery\")'&scripts=https://code.jquery.com/jquery-3.5.0.min.js",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://microlink.io\" \\\n  -d \"function=(%7B%20page%20%7D)%20%3D%3E%20page.evaluate(%22jQuery.fn.jquery%22)\" \\\n  -d \"scripts=https://code.jquery.com/jquery-3.5.0.min.js\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://microlink.io', {\n  function: '({ page }) => page.evaluate(\"jQuery.fn.jquery\")',\n  scripts: [\n    \"https://code.jquery.com/jquery-3.5.0.min.js\"\n  ]\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://microlink.io\",\n    \"function\": '''({ page }) => page.evaluate(\"jQuery.fn.jquery\")''',\n    \"scripts\": \"https://code.jquery.com/jquery-3.5.0.min.js\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://microlink.io\",\n  function: '({ page }) => page.evaluate(\"jQuery.fn.jquery\")',\n  scripts: \"https://code.jquery.com/jquery-3.5.0.min.js\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://microlink.io\",\n    \"function\" => '({ page }) => page.evaluate(\"jQuery.fn.jquery\")',\n    \"scripts\" => \"https://code.jquery.com/jquery-3.5.0.min.js\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    fn := `({ page }) => page.evaluate(\"jQuery.fn.jquery\")`\n\n    q := u.Query()\n    q.Set(\"url\", \"https://microlink.io\")\n    q.Set(\"function\", fn)\n    q.Set(\"scripts\", \"https://code.jquery.com/jquery-3.5.0.min.js\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "hplenb": {
    "CLI": "microlink https://news.ycombinator.com&filter=url,title",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://news.ycombinator.com\" \\\n  -d \"filter=url,title\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://news.ycombinator.com', {\n  filter: \"url,title\"\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://news.ycombinator.com\",\n    \"filter\": \"url,title\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://news.ycombinator.com\",\n  filter: \"url,title\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://news.ycombinator.com\",\n    \"filter\" => \"url,title\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://news.ycombinator.com\")\n    q.Set(\"filter\", \"url,title\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "j06wfl": {
    "CLI": "microlink https://time.kikobeats.com/html&force",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://time.kikobeats.com/html\" \\\n  -d \"force=true\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://time.kikobeats.com/html', {\n  force: true\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://time.kikobeats.com/html\",\n    \"force\": \"true\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://time.kikobeats.com/html\",\n  force: \"true\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://time.kikobeats.com/html\",\n    \"force\" => \"true\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://time.kikobeats.com/html\")\n    q.Set(\"force\", \"true\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "6ib8u4": {
    "CLI": "microlink https://news.ycombinator.com&headers.user-agent=googlebot&headers.accept-language=en-US",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://news.ycombinator.com\" \\\n  -d \"headers.user-agent=googlebot\" \\\n  -d \"headers.accept-language=en-US\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://news.ycombinator.com', {\n  headers: {\n    \"user-agent\": \"googlebot\",\n    \"accept-language\": \"en-US\"\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://news.ycombinator.com\",\n    \"headers.user-agent\": \"googlebot\",\n    \"headers.accept-language\": \"en-US\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://news.ycombinator.com\",\n  headers.user-agent: \"googlebot\",\n  headers.accept-language: \"en-US\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://news.ycombinator.com\",\n    \"headers.user-agent\" => \"googlebot\",\n    \"headers.accept-language\" => \"en-US\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://news.ycombinator.com\")\n    q.Set(\"headers.user-agent\", \"googlebot\")\n    q.Set(\"headers.accept-language\", \"en-US\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "b9yhc6": {
    "CLI": "microlink https://www.youtube.com/watch?v=9P6rdqiybaw&iframe",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://www.youtube.com/watch?v=9P6rdqiybaw\" \\\n  -d \"iframe=true\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://www.youtube.com/watch?v=9P6rdqiybaw', {\n  iframe: true\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://www.youtube.com/watch?v=9P6rdqiybaw\",\n    \"iframe\": \"true\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://www.youtube.com/watch?v=9P6rdqiybaw\",\n  iframe: \"true\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://www.youtube.com/watch?v=9P6rdqiybaw\",\n    \"iframe\" => \"true\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://www.youtube.com/watch?v=9P6rdqiybaw\")\n    q.Set(\"iframe\", \"true\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "p7preh": {
    "CLI": "microlink https://www.youtube.com/watch?v=9P6rdqiybaw&meta",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://www.youtube.com/watch?v=9P6rdqiybaw\" \\\n  -d \"meta=true\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://www.youtube.com/watch?v=9P6rdqiybaw', {\n  meta: true\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://www.youtube.com/watch?v=9P6rdqiybaw\",\n    \"meta\": \"true\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://www.youtube.com/watch?v=9P6rdqiybaw\",\n  meta: \"true\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://www.youtube.com/watch?v=9P6rdqiybaw\",\n    \"meta\" => \"true\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://www.youtube.com/watch?v=9P6rdqiybaw\")\n    q.Set(\"meta\", \"true\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "vzzrhn": {
    "CLI": "microlink https://www.youtube.com/watch?v=9P6rdqiybaw&video",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://www.youtube.com/watch?v=9P6rdqiybaw\" \\\n  -d \"video=true\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://www.youtube.com/watch?v=9P6rdqiybaw', {\n  video: true\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://www.youtube.com/watch?v=9P6rdqiybaw\",\n    \"video\": \"true\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://www.youtube.com/watch?v=9P6rdqiybaw\",\n  video: \"true\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://www.youtube.com/watch?v=9P6rdqiybaw\",\n    \"video\" => \"true\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://www.youtube.com/watch?v=9P6rdqiybaw\")\n    q.Set(\"video\", \"true\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "hsp58m": {
    "CLI": "microlink https://www.youtube.com/watch?v=9P6rdqiybaw&meta.author&meta.title",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://www.youtube.com/watch?v=9P6rdqiybaw\" \\\n  -d \"meta.author=true\" \\\n  -d \"meta.title=true\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://www.youtube.com/watch?v=9P6rdqiybaw', {\n  meta: {\n    author: true,\n    title: true\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://www.youtube.com/watch?v=9P6rdqiybaw\",\n    \"meta.author\": \"true\",\n    \"meta.title\": \"true\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://www.youtube.com/watch?v=9P6rdqiybaw\",\n  meta.author: \"true\",\n  meta.title: \"true\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://www.youtube.com/watch?v=9P6rdqiybaw\",\n    \"meta.author\" => \"true\",\n    \"meta.title\" => \"true\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://www.youtube.com/watch?v=9P6rdqiybaw\")\n    q.Set(\"meta.author\", \"true\")\n    q.Set(\"meta.title\", \"true\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "c19q4d": {
    "CLI": "microlink https://www.youtube.com/watch?v=9P6rdqiybaw",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://www.youtube.com/watch?v=9P6rdqiybaw\" \\\n  -d \"meta.image=false\" \\\n  -d \"meta.logo=false\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://www.youtube.com/watch?v=9P6rdqiybaw', {\n  meta: {\n    image: false,\n    logo: false\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://www.youtube.com/watch?v=9P6rdqiybaw\",\n    \"meta.image\": \"false\",\n    \"meta.logo\": \"false\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://www.youtube.com/watch?v=9P6rdqiybaw\",\n  meta.image: \"false\",\n  meta.logo: \"false\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://www.youtube.com/watch?v=9P6rdqiybaw\",\n    \"meta.image\" => \"false\",\n    \"meta.logo\" => \"false\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://www.youtube.com/watch?v=9P6rdqiybaw\")\n    q.Set(\"meta.image\", \"false\")\n    q.Set(\"meta.logo\", \"false\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "6l6ouo": {
    "CLI": "microlink https://www.youtube.com/watch?v=9P6rdqiybaw",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://www.youtube.com/watch?v=9P6rdqiybaw\" \\\n  -d \"meta=false\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://www.youtube.com/watch?v=9P6rdqiybaw', {\n  meta: false\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://www.youtube.com/watch?v=9P6rdqiybaw\",\n    \"meta\": \"false\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://www.youtube.com/watch?v=9P6rdqiybaw\",\n  meta: \"false\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://www.youtube.com/watch?v=9P6rdqiybaw\",\n    \"meta\" => \"false\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://www.youtube.com/watch?v=9P6rdqiybaw\")\n    q.Set(\"meta\", \"false\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "c8uu88": {
    "CLI": "microlink https://www.youtube.com/watch?v=9P6rdqiybaw&iframe.maxWidth=350",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://www.youtube.com/watch?v=9P6rdqiybaw\" \\\n  -d \"iframe.maxWidth=350\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://www.youtube.com/watch?v=9P6rdqiybaw', {\n  iframe: {\n    maxWidth: 350\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://www.youtube.com/watch?v=9P6rdqiybaw\",\n    \"iframe.maxWidth\": \"350\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://www.youtube.com/watch?v=9P6rdqiybaw\",\n  iframe.maxWidth: \"350\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://www.youtube.com/watch?v=9P6rdqiybaw\",\n    \"iframe.maxWidth\" => \"350\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://www.youtube.com/watch?v=9P6rdqiybaw\")\n    q.Set(\"iframe.maxWidth\", \"350\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "z7kwk": {
    "CLI": "microlink https://vercel.com&insights",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://vercel.com\" \\\n  -d \"insights=true\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://vercel.com', {\n  insights: true\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://vercel.com\",\n    \"insights\": \"true\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://vercel.com\",\n  insights: \"true\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://vercel.com\",\n    \"insights\" => \"true\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://vercel.com\")\n    q.Set(\"insights\", \"true\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "tk354h": {
    "CLI": "microlink https://vercel.com&insights.lighthouse",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://vercel.com\" \\\n  -d \"insights.lighthouse=true\" \\\n  -d \"insights.technologies=false\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://vercel.com', {\n  insights: {\n    lighthouse: true,\n    technologies: false\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://vercel.com\",\n    \"insights.lighthouse\": \"true\",\n    \"insights.technologies\": \"false\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://vercel.com\",\n  insights.lighthouse: \"true\",\n  insights.technologies: \"false\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://vercel.com\",\n    \"insights.lighthouse\" => \"true\",\n    \"insights.technologies\" => \"false\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://vercel.com\")\n    q.Set(\"insights.lighthouse\", \"true\")\n    q.Set(\"insights.technologies\", \"false\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "6ms0s": {
    "CLI": "microlink https://css-tricks.com/nerds-guide-color-web&insights.lighthouse",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://css-tricks.com/nerds-guide-color-web\" \\\n  -d \"insights.lighthouse=true\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://css-tricks.com/nerds-guide-color-web', {\n  insights: {\n    lighthouse: true\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://css-tricks.com/nerds-guide-color-web\",\n    \"insights.lighthouse\": \"true\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://css-tricks.com/nerds-guide-color-web\",\n  insights.lighthouse: \"true\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://css-tricks.com/nerds-guide-color-web\",\n    \"insights.lighthouse\" => \"true\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://css-tricks.com/nerds-guide-color-web\")\n    q.Set(\"insights.lighthouse\", \"true\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "wkple6": {
    "CLI": "microlink https://css-tricks.com/nerds-guide-color-web&insights.lighthouse.output=html",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://css-tricks.com/nerds-guide-color-web\" \\\n  -d \"insights.lighthouse.output=html\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://css-tricks.com/nerds-guide-color-web', {\n  insights: {\n    lighthouse: {\n      output: \"html\"\n    }\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://css-tricks.com/nerds-guide-color-web\",\n    \"insights.lighthouse.output\": \"html\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://css-tricks.com/nerds-guide-color-web\",\n  insights.lighthouse.output: \"html\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://css-tricks.com/nerds-guide-color-web\",\n    \"insights.lighthouse.output\" => \"html\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://css-tricks.com/nerds-guide-color-web\")\n    q.Set(\"insights.lighthouse.output\", \"html\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "qzqdsr": {
    "CLI": "microlink https://css-tricks.com/nerds-guide-color-web&insights.lighthouse.onlyCategories=accesibility",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://css-tricks.com/nerds-guide-color-web\" \\\n  -d \"insights.lighthouse.onlyCategories=accesibility\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://css-tricks.com/nerds-guide-color-web', {\n  insights: {\n    lighthouse: {\n      onlyCategories: [\n        \"accesibility\"\n      ]\n    }\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://css-tricks.com/nerds-guide-color-web\",\n    \"insights.lighthouse.onlyCategories\": \"accesibility\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://css-tricks.com/nerds-guide-color-web\",\n  insights.lighthouse.onlyCategories: \"accesibility\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://css-tricks.com/nerds-guide-color-web\",\n    \"insights.lighthouse.onlyCategories\" => \"accesibility\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://css-tricks.com/nerds-guide-color-web\")\n    q.Set(\"insights.lighthouse.onlyCategories\", \"accesibility\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "jhh6xj": {
    "CLI": "microlink https://css-tricks.com/nerds-guide-color-web&insights.lighthouse.preset=desktop",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://css-tricks.com/nerds-guide-color-web\" \\\n  -d \"insights.lighthouse.preset=desktop\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://css-tricks.com/nerds-guide-color-web', {\n  insights: {\n    lighthouse: {\n      preset: \"desktop\"\n    }\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://css-tricks.com/nerds-guide-color-web\",\n    \"insights.lighthouse.preset\": \"desktop\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://css-tricks.com/nerds-guide-color-web\",\n  insights.lighthouse.preset: \"desktop\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://css-tricks.com/nerds-guide-color-web\",\n    \"insights.lighthouse.preset\" => \"desktop\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://css-tricks.com/nerds-guide-color-web\")\n    q.Set(\"insights.lighthouse.preset\", \"desktop\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "7itkbu": {
    "CLI": "microlink https://microlink.io&insights.technologies",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://microlink.io\" \\\n  -d \"insights.technologies=true\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://microlink.io', {\n  insights: {\n    technologies: true\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://microlink.io\",\n    \"insights.technologies\": \"true\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://microlink.io\",\n  insights.technologies: \"true\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://microlink.io\",\n    \"insights.technologies\" => \"true\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://microlink.io\")\n    q.Set(\"insights.technologies\", \"true\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "llexw9": {
    "CLI": "microlink https://news.ycombinator.com&javascript",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://news.ycombinator.com\" \\\n  -d \"javascript=true\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://news.ycombinator.com', {\n  javascript: true\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://news.ycombinator.com\",\n    \"javascript\": \"true\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://news.ycombinator.com\",\n  javascript: \"true\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://news.ycombinator.com\",\n    \"javascript\" => \"true\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://news.ycombinator.com\")\n    q.Set(\"javascript\", \"true\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "6zkldz": {
    "CLI": "microlink https://blog.alexmaccaw.com/advice-to-my-younger-self&pdf&mediaType=screen",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://blog.alexmaccaw.com/advice-to-my-younger-self\" \\\n  -d \"pdf=true\" \\\n  -d \"mediaType=screen\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://blog.alexmaccaw.com/advice-to-my-younger-self', {\n  pdf: true,\n  mediaType: \"screen\"\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://blog.alexmaccaw.com/advice-to-my-younger-self\",\n    \"pdf\": \"true\",\n    \"mediaType\": \"screen\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://blog.alexmaccaw.com/advice-to-my-younger-self\",\n  pdf: \"true\",\n  mediaType: \"screen\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://blog.alexmaccaw.com/advice-to-my-younger-self\",\n    \"pdf\" => \"true\",\n    \"mediaType\" => \"screen\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://blog.alexmaccaw.com/advice-to-my-younger-self\")\n    q.Set(\"pdf\", \"true\")\n    q.Set(\"mediaType\", \"screen\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "fp85ha": {
    "CLI": "microlink https://microlink.io&screenshot&modules='https://cdn.jsdelivr.net/npm/@microlink/mql@0.3.12/src/browser.js,document.body.style.backgroundColor = '\"'\"'red'\"'\"''",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://microlink.io\" \\\n  -d \"screenshot=true\" \\\n  -d \"modules=https%3A%2F%2Fcdn.jsdelivr.net%2Fnpm%2F%40microlink%2Fmql%400.3.12%2Fsrc%2Fbrowser.js%2Cdocument.body.style.backgroundColor%20%3D%20'red'\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://microlink.io', {\n  screenshot: true,\n  modules: [\n    \"https://cdn.jsdelivr.net/npm/@microlink/mql@0.3.12/src/browser.js\",\n    \"document.body.style.backgroundColor = 'red'\"\n  ]\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://microlink.io\",\n    \"screenshot\": \"true\",\n    \"modules\": '''https://cdn.jsdelivr.net/npm/@microlink/mql@0.3.12/src/browser.js,document.body.style.backgroundColor = 'red''''\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://microlink.io\",\n  screenshot: \"true\",\n  modules: \"https://cdn.jsdelivr.net/npm/@microlink/mql@0.3.12/src/browser.js,document.body.style.backgroundColor = 'red'\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://microlink.io\",\n    \"screenshot\" => \"true\",\n    \"modules\" => \"https://cdn.jsdelivr.net/npm/@microlink/mql@0.3.12/src/browser.js,document.body.style.backgroundColor = 'red'\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    modulesParam := `https://cdn.jsdelivr.net/npm/@microlink/mql@0.3.12/src/browser.js,document.body.style.backgroundColor = 'red'`\n\n    q := u.Query()\n    q.Set(\"url\", \"https://microlink.io\")\n    q.Set(\"screenshot\", \"true\")\n    q.Set(\"modules\", modulesParam)\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "aevqi0": {
    "CLI": "microlink https://microlink.io&palette",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://microlink.io\" \\\n  -d \"palette=true\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://microlink.io', {\n  palette: true\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://microlink.io\",\n    \"palette\": \"true\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://microlink.io\",\n  palette: \"true\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://microlink.io\",\n    \"palette\" => \"true\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://microlink.io\")\n    q.Set(\"palette\", \"true\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "o006sm": {
    "CLI": "microlink https://rauchg.com/2014/7-principles-of-rich-web-applications&pdf",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://rauchg.com/2014/7-principles-of-rich-web-applications\" \\\n  -d \"pdf=true\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://rauchg.com/2014/7-principles-of-rich-web-applications', {\n  pdf: true\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://rauchg.com/2014/7-principles-of-rich-web-applications\",\n    \"pdf\": \"true\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://rauchg.com/2014/7-principles-of-rich-web-applications\",\n  pdf: \"true\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://rauchg.com/2014/7-principles-of-rich-web-applications\",\n    \"pdf\" => \"true\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://rauchg.com/2014/7-principles-of-rich-web-applications\")\n    q.Set(\"pdf\", \"true\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "ho16un": {
    "CLI": "microlink https://rauchg.com/2014/7-principles-of-rich-web-applications&pdf&scale=1&margin=0.4cm",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://rauchg.com/2014/7-principles-of-rich-web-applications\" \\\n  -d \"pdf=true\" \\\n  -d \"scale=1\" \\\n  -d \"margin=0.4cm\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://rauchg.com/2014/7-principles-of-rich-web-applications', {\n  pdf: true,\n  scale: 1,\n  margin: \"0.4cm\"\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://rauchg.com/2014/7-principles-of-rich-web-applications\",\n    \"pdf\": \"true\",\n    \"scale\": \"1\",\n    \"margin\": \"0.4cm\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://rauchg.com/2014/7-principles-of-rich-web-applications\",\n  pdf: \"true\",\n  scale: \"1\",\n  margin: \"0.4cm\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://rauchg.com/2014/7-principles-of-rich-web-applications\",\n    \"pdf\" => \"true\",\n    \"scale\" => \"1\",\n    \"margin\" => \"0.4cm\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://rauchg.com/2014/7-principles-of-rich-web-applications\")\n    q.Set(\"pdf\", \"true\")\n    q.Set(\"scale\", \"1\")\n    q.Set(\"margin\", \"0.4cm\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "h0ne9a": {
    "CLI": "microlink https://keygen.sh/blog/i-quit&pdf.format=A4",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://keygen.sh/blog/i-quit\" \\\n  -d \"pdf.format=A4\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://keygen.sh/blog/i-quit', {\n  pdf: {\n    format: \"A4\"\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://keygen.sh/blog/i-quit\",\n    \"pdf.format\": \"A4\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://keygen.sh/blog/i-quit\",\n  pdf.format: \"A4\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://keygen.sh/blog/i-quit\",\n    \"pdf.format\" => \"A4\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://keygen.sh/blog/i-quit\")\n    q.Set(\"pdf.format\", \"A4\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "25hide": {
    "CLI": "microlink https://oxide.computer&pdf.height=480px",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://oxide.computer\" \\\n  -d \"pdf.height=480px\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://oxide.computer', {\n  pdf: {\n    height: \"480px\"\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://oxide.computer\",\n    \"pdf.height\": \"480px\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://oxide.computer\",\n  pdf.height: \"480px\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://oxide.computer\",\n    \"pdf.height\" => \"480px\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://oxide.computer\")\n    q.Set(\"pdf.height\", \"480px\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "uamjuz": {
    "CLI": "microlink https://www.algolia.com&pdf.landscape",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://www.algolia.com\" \\\n  -d \"pdf.landscape=true\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://www.algolia.com', {\n  pdf: {\n    landscape: true\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://www.algolia.com\",\n    \"pdf.landscape\": \"true\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://www.algolia.com\",\n  pdf.landscape: \"true\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://www.algolia.com\",\n    \"pdf.landscape\" => \"true\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://www.algolia.com\")\n    q.Set(\"pdf.landscape\", \"true\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "59cyh": {
    "CLI": "microlink https://basecamp.com/shapeup/0.3-chapter-01&pdf.margin=4mm",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://basecamp.com/shapeup/0.3-chapter-01\" \\\n  -d \"pdf.margin=4mm\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://basecamp.com/shapeup/0.3-chapter-01', {\n  pdf: {\n    margin: \"4mm\"\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://basecamp.com/shapeup/0.3-chapter-01\",\n    \"pdf.margin\": \"4mm\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://basecamp.com/shapeup/0.3-chapter-01\",\n  pdf.margin: \"4mm\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://basecamp.com/shapeup/0.3-chapter-01\",\n    \"pdf.margin\" => \"4mm\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://basecamp.com/shapeup/0.3-chapter-01\")\n    q.Set(\"pdf.margin\", \"4mm\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "arqkru": {
    "CLI": "microlink https://stripe.com&pdf.landscape.pageRanges=1-1",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://stripe.com\" \\\n  -d \"pdf.landscape.pageRanges=1-1\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://stripe.com', {\n  pdf: {\n    landscape: {\n      pageRanges: \"1-1\"\n    }\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://stripe.com\",\n    \"pdf.landscape.pageRanges\": \"1-1\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://stripe.com\",\n  pdf.landscape.pageRanges: \"1-1\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://stripe.com\",\n    \"pdf.landscape.pageRanges\" => \"1-1\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://stripe.com\")\n    q.Set(\"pdf.landscape.pageRanges\", \"1-1\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "kq5and": {
    "CLI": "microlink https://varnish-cache.org/docs/trunk/phk/thatslow.html&pdf.scale=1",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://varnish-cache.org/docs/trunk/phk/thatslow.html\" \\\n  -d \"pdf.scale=1\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://varnish-cache.org/docs/trunk/phk/thatslow.html', {\n  pdf: {\n    scale: 1\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://varnish-cache.org/docs/trunk/phk/thatslow.html\",\n    \"pdf.scale\": \"1\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://varnish-cache.org/docs/trunk/phk/thatslow.html\",\n  pdf.scale: \"1\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://varnish-cache.org/docs/trunk/phk/thatslow.html\",\n    \"pdf.scale\" => \"1\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://varnish-cache.org/docs/trunk/phk/thatslow.html\")\n    q.Set(\"pdf.scale\", \"1\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "3glt4w": {
    "CLI": "microlink https://www.raycast.com&pdf.width=640px",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://www.raycast.com\" \\\n  -d \"pdf.width=640px\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://www.raycast.com', {\n  pdf: {\n    width: \"640px\"\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://www.raycast.com\",\n    \"pdf.width\": \"640px\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://www.raycast.com\",\n  pdf.width: \"640px\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://www.raycast.com\",\n    \"pdf.width\" => \"640px\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://www.raycast.com\")\n    q.Set(\"pdf.width\", \"640px\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "gyaddz": {
    "CLI": "microlink https://microlink.io&ping",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://microlink.io\" \\\n  -d \"ping=true\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://microlink.io', {\n  ping: true\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://microlink.io\",\n    \"ping\": \"true\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://microlink.io\",\n  ping: \"true\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://microlink.io\",\n    \"ping\" => \"true\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://microlink.io\")\n    q.Set(\"ping\", \"true\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "9fxtym": {
    "CLI": "microlink https://microlink.io",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://microlink.io\" \\\n  -d \"ping.audio=false\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://microlink.io', {\n  ping: {\n    audio: false\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://microlink.io\",\n    \"ping.audio\": \"false\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://microlink.io\",\n  ping.audio: \"false\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://microlink.io\",\n    \"ping.audio\" => \"false\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://microlink.io\")\n    q.Set(\"ping.audio\", \"false\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "z79tsg": {
    "CLI": "microlink https://microlink.io",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://microlink.io\" \\\n  -d \"ping=false\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://microlink.io', {\n  ping: false\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://microlink.io\",\n    \"ping\": \"false\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://microlink.io\",\n  ping: \"false\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://microlink.io\",\n    \"ping\" => \"false\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://microlink.io\")\n    q.Set(\"ping\", \"false\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "dpqjtj": {
    "CLI": "microlink https://www.sportsnet.ca/hockey/nhl/leafs-john-tavares-return-new-york-hope-positive&prerender=auto",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://www.sportsnet.ca/hockey/nhl/leafs-john-tavares-return-new-york-hope-positive\" \\\n  -d \"prerender=auto\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://www.sportsnet.ca/hockey/nhl/leafs-john-tavares-return-new-york-hope-positive', {\n  prerender: \"auto\"\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://www.sportsnet.ca/hockey/nhl/leafs-john-tavares-return-new-york-hope-positive\",\n    \"prerender\": \"auto\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://www.sportsnet.ca/hockey/nhl/leafs-john-tavares-return-new-york-hope-positive\",\n  prerender: \"auto\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://www.sportsnet.ca/hockey/nhl/leafs-john-tavares-return-new-york-hope-positive\",\n    \"prerender\" => \"auto\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://www.sportsnet.ca/hockey/nhl/leafs-john-tavares-return-new-york-hope-positive\")\n    q.Set(\"prerender\", \"auto\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "1qhcnl": {
    "CLI": "microlink https://www.sportsnet.ca/hockey/nhl/leafs-john-tavares-return-new-york-hope-positive",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://www.sportsnet.ca/hockey/nhl/leafs-john-tavares-return-new-york-hope-positive\" \\\n  -d \"prerender=false\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://www.sportsnet.ca/hockey/nhl/leafs-john-tavares-return-new-york-hope-positive', {\n  prerender: false\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://www.sportsnet.ca/hockey/nhl/leafs-john-tavares-return-new-york-hope-positive\",\n    \"prerender\": \"false\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://www.sportsnet.ca/hockey/nhl/leafs-john-tavares-return-new-york-hope-positive\",\n  prerender: \"false\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://www.sportsnet.ca/hockey/nhl/leafs-john-tavares-return-new-york-hope-positive\",\n    \"prerender\" => \"false\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://www.sportsnet.ca/hockey/nhl/leafs-john-tavares-return-new-york-hope-positive\")\n    q.Set(\"prerender\", \"false\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "uy71lv": {
    "CLI": "microlink https://geolocation.microlink.io&proxy=https://myproxy:603f60f5@superproxy.cool:8001",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://geolocation.microlink.io\" \\\n  -d \"proxy=https://myproxy:603f60f5@superproxy.cool:8001\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://geolocation.microlink.io', {\n  proxy: \"https://myproxy:603f60f5@superproxy.cool:8001\"\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://geolocation.microlink.io\",\n    \"proxy\": \"https://myproxy:603f60f5@superproxy.cool:8001\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://geolocation.microlink.io\",\n  proxy: \"https://myproxy:603f60f5@superproxy.cool:8001\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://geolocation.microlink.io\",\n    \"proxy\" => \"https://myproxy:603f60f5@superproxy.cool:8001\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://geolocation.microlink.io\")\n    q.Set(\"proxy\", \"https://myproxy:603f60f5@superproxy.cool:8001\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "sd2pwf": {
    "CLI": "microlink https://cloverapp.co&retry=2",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://cloverapp.co\" \\\n  -d \"retry=2\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://cloverapp.co', {\n  retry: 2\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://cloverapp.co\",\n    \"retry\": \"2\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://cloverapp.co\",\n  retry: \"2\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://cloverapp.co\",\n    \"retry\" => \"2\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://cloverapp.co\")\n    q.Set(\"retry\", \"2\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "hq90z6": {
    "CLI": "microlink https://www.netflix.com/title/80057281&screenshot",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://www.netflix.com/title/80057281\" \\\n  -d \"screenshot=true\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://www.netflix.com/title/80057281', {\n  screenshot: true\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://www.netflix.com/title/80057281\",\n    \"screenshot\": \"true\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://www.netflix.com/title/80057281\",\n  screenshot: \"true\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://www.netflix.com/title/80057281\",\n    \"screenshot\" => \"true\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://www.netflix.com/title/80057281\")\n    q.Set(\"screenshot\", \"true\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "t86dn5": {
    "CLI": "microlink https://www.netflix.com/title/80057281&screenshot&element=#section-hero",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://www.netflix.com/title/80057281\" \\\n  -d \"screenshot=true\" \\\n  -d \"element=#section-hero\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://www.netflix.com/title/80057281', {\n  screenshot: true,\n  element: \"#section-hero\"\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://www.netflix.com/title/80057281\",\n    \"screenshot\": \"true\",\n    \"element\": \"#section-hero\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://www.netflix.com/title/80057281\",\n  screenshot: \"true\",\n  element: \"#section-hero\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://www.netflix.com/title/80057281\",\n    \"screenshot\" => \"true\",\n    \"element\" => \"#section-hero\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://www.netflix.com/title/80057281\")\n    q.Set(\"screenshot\", \"true\")\n    q.Set(\"element\", \"#section-hero\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "sxwv8x": {
    "CLI": "microlink https://emojipedia-api.vercel.app&screenshot.codeScheme=atom-dark",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://emojipedia-api.vercel.app\" \\\n  -d \"screenshot.codeScheme=atom-dark\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://emojipedia-api.vercel.app', {\n  screenshot: {\n    codeScheme: \"atom-dark\"\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://emojipedia-api.vercel.app\",\n    \"screenshot.codeScheme\": \"atom-dark\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://emojipedia-api.vercel.app\",\n  screenshot.codeScheme: \"atom-dark\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://emojipedia-api.vercel.app\",\n    \"screenshot.codeScheme\" => \"atom-dark\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://emojipedia-api.vercel.app\")\n    q.Set(\"screenshot.codeScheme\", \"atom-dark\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "cz8lf5": {
    "CLI": "microlink https://codepen.io/fossheim/full/oNjxrZa&screenshot.element=#result-iframe-wrap",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://codepen.io/fossheim/full/oNjxrZa\" \\\n  -d \"screenshot.element=#result-iframe-wrap\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://codepen.io/fossheim/full/oNjxrZa', {\n  screenshot: {\n    element: \"#result-iframe-wrap\"\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://codepen.io/fossheim/full/oNjxrZa\",\n    \"screenshot.element\": \"#result-iframe-wrap\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://codepen.io/fossheim/full/oNjxrZa\",\n  screenshot.element: \"#result-iframe-wrap\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://codepen.io/fossheim/full/oNjxrZa\",\n    \"screenshot.element\" => \"#result-iframe-wrap\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://codepen.io/fossheim/full/oNjxrZa\")\n    q.Set(\"screenshot.element\", \"#result-iframe-wrap\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "ac2np1": {
    "CLI": "microlink https://microlink.io/recipes&screenshot.fullPage",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://microlink.io/recipes\" \\\n  -d \"screenshot.fullPage=true\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://microlink.io/recipes', {\n  screenshot: {\n    fullPage: true\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://microlink.io/recipes\",\n    \"screenshot.fullPage\": \"true\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://microlink.io/recipes\",\n  screenshot.fullPage: \"true\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://microlink.io/recipes\",\n    \"screenshot.fullPage\" => \"true\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://microlink.io/recipes\")\n    q.Set(\"screenshot.fullPage\", \"true\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "jxr7or": {
    "CLI": "microlink https://www.apple.com/music&screenshot.overlay.background='linear-gradient(225deg, #FF057C 0%, #8D0B93 50%, #321575 100%)'&screenshot.overlay.browser=dark",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://www.apple.com/music\" \\\n  -d \"screenshot.overlay.background=linear-gradient(225deg%2C%20%23FF057C%200%25%2C%20%238D0B93%2050%25%2C%20%23321575%20100%25)\" \\\n  -d \"screenshot.overlay.browser=dark\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://www.apple.com/music', {\n  screenshot: {\n    overlay: {\n      background: \"linear-gradient(225deg, #FF057C 0%, #8D0B93 50%, #321575 100%)\",\n      browser: \"dark\"\n    }\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://www.apple.com/music\",\n    \"screenshot.overlay.background\": \"linear-gradient(225deg, #FF057C 0%, #8D0B93 50%, #321575 100%)\",\n    \"screenshot.overlay.browser\": \"dark\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://www.apple.com/music\",\n  screenshot.overlay.background: \"linear-gradient(225deg, #FF057C 0%, #8D0B93 50%, #321575 100%)\",\n  screenshot.overlay.browser: \"dark\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://www.apple.com/music\",\n    \"screenshot.overlay.background\" => \"linear-gradient(225deg, #FF057C 0%, #8D0B93 50%, #321575 100%)\",\n    \"screenshot.overlay.browser\" => \"dark\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://www.apple.com/music\")\n    q.Set(\"screenshot.overlay.background\", \"linear-gradient(225deg, #FF057C 0%, #8D0B93 50%, #321575 100%)\")\n    q.Set(\"screenshot.overlay.browser\", \"dark\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "gi0u7s": {
    "CLI": "microlink https://kikobeats.com&screenshot.omitBackground",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://kikobeats.com\" \\\n  -d \"screenshot.omitBackground=true\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://kikobeats.com', {\n  screenshot: {\n    omitBackground: true\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://kikobeats.com\",\n    \"screenshot.omitBackground\": \"true\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://kikobeats.com\",\n  screenshot.omitBackground: \"true\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://kikobeats.com\",\n    \"screenshot.omitBackground\" => \"true\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://kikobeats.com\")\n    q.Set(\"screenshot.omitBackground\", \"true\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "e0ckv": {
    "CLI": "microlink https://microlink.io&screenshot&scripts='%5B%5D.forEach.call(document.querySelectorAll(%22*%22)%2Cfunction(a)%7Ba.style.outline%3D%221px%20solid%20%23%22%2B(~~(Math.random()*(1%3C%3C24))).toString(16)%7D)'",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://microlink.io\" \\\n  -d \"screenshot=true\" \\\n  -d \"scripts=%5B%5D.forEach.call(document.querySelectorAll(%22*%22)%2Cfunction(a)%7Ba.style.outline%3D%221px%20solid%20%23%22%2B(~~(Math.random()*(1%3C%3C24))).toString(16)%7D)\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://microlink.io', {\n  screenshot: true,\n  scripts: [\n    \"%5B%5D.forEach.call(document.querySelectorAll(%22*%22)%2Cfunction(a)%7Ba.style.outline%3D%221px%20solid%20%23%22%2B(~~(Math.random()*(1%3C%3C24))).toString(16)%7D)\"\n  ]\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://microlink.io\",\n    \"screenshot\": \"true\",\n    \"scripts\": \"%5B%5D.forEach.call(document.querySelectorAll(%22*%22)%2Cfunction(a)%7Ba.style.outline%3D%221px%20solid%20%23%22%2B(~~(Math.random()*(1%3C%3C24))).toString(16)%7D)\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://microlink.io\",\n  screenshot: \"true\",\n  scripts: \"%5B%5D.forEach.call(document.querySelectorAll(%22*%22)%2Cfunction(a)%7Ba.style.outline%3D%221px%20solid%20%23%22%2B(~~(Math.random()*(1%3C%3C24))).toString(16)%7D)\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://microlink.io\",\n    \"screenshot\" => \"true\",\n    \"scripts\" => \"%5B%5D.forEach.call(document.querySelectorAll(%22*%22)%2Cfunction(a)%7Ba.style.outline%3D%221px%20solid%20%23%22%2B(~~(Math.random()*(1%3C%3C24))).toString(16)%7D)\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://microlink.io\")\n    q.Set(\"screenshot\", \"true\")\n    q.Set(\"scripts\", \"%5B%5D.forEach.call(document.querySelectorAll(%22*%22)%2Cfunction(a)%7Ba.style.outline%3D%221px%20solid%20%23%22%2B(~~(Math.random()*(1%3C%3C24))).toString(16)%7D)\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "15mncj": {
    "CLI": "microlink https://microlink.io&screenshot&scroll=#pricing",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://microlink.io\" \\\n  -d \"screenshot=true\" \\\n  -d \"scroll=#pricing\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://microlink.io', {\n  screenshot: true,\n  scroll: \"#pricing\"\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://microlink.io\",\n    \"screenshot\": \"true\",\n    \"scroll\": \"#pricing\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://microlink.io\",\n  screenshot: \"true\",\n  scroll: \"#pricing\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://microlink.io\",\n    \"screenshot\" => \"true\",\n    \"scroll\" => \"#pricing\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://microlink.io\")\n    q.Set(\"screenshot\", \"true\")\n    q.Set(\"scroll\", \"#pricing\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "n876qx": {
    "CLI": "microlink https://example.com&screenshot&styles='body { background: white; },div { border: 1px solid gray; font-family: \"Comic Sans MS\", \"Comic Sans\", cursive; }'",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://example.com\" \\\n  -d \"screenshot=true\" \\\n  -d \"styles=body%20%7B%20background%3A%20white%3B%20%7D%2Cdiv%20%7B%20border%3A%201px%20solid%20gray%3B%20font-family%3A%20%22Comic%20Sans%20MS%22%2C%20%22Comic%20Sans%22%2C%20cursive%3B%20%7D\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://example.com', {\n  screenshot: true,\n  styles: [\n    \"body { background: white; }\",\n    'div { border: 1px solid gray; font-family: \"Comic Sans MS\", \"Comic Sans\", cursive; }'\n  ]\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://example.com\",\n    \"screenshot\": \"true\",\n    \"styles\": '''body { background: white; },div { border: 1px solid gray; font-family: \"Comic Sans MS\", \"Comic Sans\", cursive; }'''\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://example.com\",\n  screenshot: \"true\",\n  styles: 'body { background: white; },div { border: 1px solid gray; font-family: \"Comic Sans MS\", \"Comic Sans\", cursive; }'\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://example.com\",\n    \"screenshot\" => \"true\",\n    \"styles\" => 'body { background: white; },div { border: 1px solid gray; font-family: \"Comic Sans MS\", \"Comic Sans\", cursive; }'\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    stylesParam := `body { background: white; },div { border: 1px solid gray; font-family: \"Comic Sans MS\", \"Comic Sans\", cursive; }`\n\n    q := u.Query()\n    q.Set(\"url\", \"https://example.com\")\n    q.Set(\"screenshot\", \"true\")\n    q.Set(\"styles\", stylesParam)\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "eye93n": {
    "CLI": "microlink https://microlink.io&ttl=1d&staleTtl=0",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://microlink.io\" \\\n  -d \"ttl=1d\" \\\n  -d \"staleTtl=0\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://microlink.io', {\n  ttl: \"1d\",\n  staleTtl: 0\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://microlink.io\",\n    \"ttl\": \"1d\",\n    \"staleTtl\": \"0\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://microlink.io\",\n  ttl: \"1d\",\n  staleTtl: \"0\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://microlink.io\",\n    \"ttl\" => \"1d\",\n    \"staleTtl\" => \"0\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://microlink.io\")\n    q.Set(\"ttl\", \"1d\")\n    q.Set(\"staleTtl\", \"0\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "7wv73u": {
    "CLI": "microlink https://microlink.io&timeout=10s",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://microlink.io\" \\\n  -d \"timeout=10s\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://microlink.io', {\n  timeout: \"10s\"\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://microlink.io\",\n    \"timeout\": \"10s\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://microlink.io\",\n  timeout: \"10s\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://microlink.io\",\n    \"timeout\" => \"10s\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://microlink.io\")\n    q.Set(\"timeout\", \"10s\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "gmqvgh": {
    "CLI": "microlink https://kikobeats.com",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://kikobeats.com\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://kikobeats.com')",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://kikobeats.com\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://kikobeats.com\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://kikobeats.com\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://kikobeats.com\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "lykba": {
    "CLI": "microlink https://kikobeats.com?ref=microlink",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://kikobeats.com?ref=microlink\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://kikobeats.com?ref=microlink')",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://kikobeats.com?ref=microlink\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://kikobeats.com?ref=microlink\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://kikobeats.com?ref=microlink\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://kikobeats.com?ref=microlink\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "paqbdt": {
    "CLI": "microlink https://en.wikipedia.org/wiki/Bob_Dylan&screenshot&viewport.width=640&viewport.height=400&viewport.deviceScaleFactor=2&viewport.isMobile",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://en.wikipedia.org/wiki/Bob_Dylan\" \\\n  -d \"screenshot=true\" \\\n  -d \"viewport.width=640\" \\\n  -d \"viewport.height=400\" \\\n  -d \"viewport.deviceScaleFactor=2\" \\\n  -d \"viewport.isMobile=true\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://en.wikipedia.org/wiki/Bob_Dylan', {\n  screenshot: true,\n  viewport: {\n    width: 640,\n    height: 400,\n    deviceScaleFactor: 2,\n    isMobile: true\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://en.wikipedia.org/wiki/Bob_Dylan\",\n    \"screenshot\": \"true\",\n    \"viewport.width\": \"640\",\n    \"viewport.height\": \"400\",\n    \"viewport.deviceScaleFactor\": \"2\",\n    \"viewport.isMobile\": \"true\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://en.wikipedia.org/wiki/Bob_Dylan\",\n  screenshot: \"true\",\n  viewport.width: \"640\",\n  viewport.height: \"400\",\n  viewport.deviceScaleFactor: \"2\",\n  viewport.isMobile: \"true\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://en.wikipedia.org/wiki/Bob_Dylan\",\n    \"screenshot\" => \"true\",\n    \"viewport.width\" => \"640\",\n    \"viewport.height\" => \"400\",\n    \"viewport.deviceScaleFactor\" => \"2\",\n    \"viewport.isMobile\" => \"true\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://en.wikipedia.org/wiki/Bob_Dylan\")\n    q.Set(\"screenshot\", \"true\")\n    q.Set(\"viewport.width\", \"640\")\n    q.Set(\"viewport.height\", \"400\")\n    q.Set(\"viewport.deviceScaleFactor\", \"2\")\n    q.Set(\"viewport.isMobile\", \"true\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "284v5p": {
    "CLI": "microlink https://en.wikipedia.org/wiki/Bob_Dylan&screenshot&viewport.deviceScaleFactor=0.5",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://en.wikipedia.org/wiki/Bob_Dylan\" \\\n  -d \"screenshot=true\" \\\n  -d \"viewport.deviceScaleFactor=0.5\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://en.wikipedia.org/wiki/Bob_Dylan', {\n  screenshot: true,\n  viewport: {\n    deviceScaleFactor: 0.5\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://en.wikipedia.org/wiki/Bob_Dylan\",\n    \"screenshot\": \"true\",\n    \"viewport.deviceScaleFactor\": \"0.5\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://en.wikipedia.org/wiki/Bob_Dylan\",\n  screenshot: \"true\",\n  viewport.deviceScaleFactor: \"0.5\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://en.wikipedia.org/wiki/Bob_Dylan\",\n    \"screenshot\" => \"true\",\n    \"viewport.deviceScaleFactor\" => \"0.5\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://en.wikipedia.org/wiki/Bob_Dylan\")\n    q.Set(\"screenshot\", \"true\")\n    q.Set(\"viewport.deviceScaleFactor\", \"0.5\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "jc4jsn": {
    "CLI": "microlink https://dev.to&screenshot&waitForSelector=main",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://dev.to\" \\\n  -d \"screenshot=true\" \\\n  -d \"waitForSelector=main\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://dev.to', {\n  screenshot: true,\n  waitForSelector: \"main\"\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://dev.to\",\n    \"screenshot\": \"true\",\n    \"waitForSelector\": \"main\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://dev.to\",\n  screenshot: \"true\",\n  waitForSelector: \"main\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://dev.to\",\n    \"screenshot\" => \"true\",\n    \"waitForSelector\" => \"main\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://dev.to\")\n    q.Set(\"screenshot\", \"true\")\n    q.Set(\"waitForSelector\", \"main\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "ae03ap": {
    "CLI": "microlink https://dev.to&screenshot&waitForTimeout=3000",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://dev.to\" \\\n  -d \"screenshot=true\" \\\n  -d \"waitForTimeout=3000\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://dev.to', {\n  screenshot: true,\n  waitForTimeout: 3000\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://dev.to\",\n    \"screenshot\": \"true\",\n    \"waitForTimeout\": \"3000\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://dev.to\",\n  screenshot: \"true\",\n  waitForTimeout: \"3000\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://dev.to\",\n    \"screenshot\" => \"true\",\n    \"waitForTimeout\" => \"3000\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://dev.to\")\n    q.Set(\"screenshot\", \"true\")\n    q.Set(\"waitForTimeout\", \"3000\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "67x338": {
    "CLI": "microlink https://dev.to&screenshot&waitUntil=domcontentloaded",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://dev.to\" \\\n  -d \"screenshot=true\" \\\n  -d \"waitUntil=domcontentloaded\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://dev.to', {\n  screenshot: true,\n  waitUntil: \"domcontentloaded\"\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://dev.to\",\n    \"screenshot\": \"true\",\n    \"waitUntil\": \"domcontentloaded\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://dev.to\",\n  screenshot: \"true\",\n  waitUntil: \"domcontentloaded\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://dev.to\",\n    \"screenshot\" => \"true\",\n    \"waitUntil\" => \"domcontentloaded\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://dev.to\")\n    q.Set(\"screenshot\", \"true\")\n    q.Set(\"waitUntil\", \"domcontentloaded\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "44bro6": {
    "CLI": "microlink https://dev.to&screenshot&waitUntil=domcontentloaded&waitForSelector=h1",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://dev.to\" \\\n  -d \"screenshot=true\" \\\n  -d \"waitUntil=domcontentloaded\" \\\n  -d \"waitForSelector=h1\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://dev.to', {\n  screenshot: true,\n  waitUntil: \"domcontentloaded\",\n  waitForSelector: \"h1\"\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://dev.to\",\n    \"screenshot\": \"true\",\n    \"waitUntil\": \"domcontentloaded\",\n    \"waitForSelector\": \"h1\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://dev.to\",\n  screenshot: \"true\",\n  waitUntil: \"domcontentloaded\",\n  waitForSelector: \"h1\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://dev.to\",\n    \"screenshot\" => \"true\",\n    \"waitUntil\" => \"domcontentloaded\",\n    \"waitForSelector\" => \"h1\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://dev.to\")\n    q.Set(\"screenshot\", \"true\")\n    q.Set(\"waitUntil\", \"domcontentloaded\")\n    q.Set(\"waitForSelector\", \"h1\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  },
  "hkez97": {
    "CLI": "microlink https://microlink.io&screenshot.type=jpeg",
    "cURL": "curl -G \"https://api.microlink.io\" \\\n  -d \"url=https://microlink.io\" \\\n  -d \"screenshot.type=jpeg\"",
    "JavaScript": "import mql from '@microlink/mql'\n\nconst { data } = await mql('https://microlink.io', {\n  screenshot: {\n    type: \"jpeg\"\n  }\n})",
    "Python": "import requests\n\nurl = \"https://api.microlink.io/\"\n\nquerystring = {\n    \"url\": \"https://microlink.io\",\n    \"screenshot.type\": \"jpeg\"\n}\n\nresponse = requests.get(url, params=querystring)\n\nprint(response.json())",
    "Ruby": "require 'uri'\nrequire 'net/http'\n\nbase_url = \"https://api.microlink.io/\"\n\nparams = {\n  url: \"https://microlink.io\",\n  screenshot.type: \"jpeg\"\n}\n\nuri = URI(base_url)\nuri.query = URI.encode_www_form(params)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Get.new(uri)\nresponse = http.request(request)\n\nputs response.body",
    "PHP": "<?php\n\n$baseUrl = \"https://api.microlink.io/\";\n\n$params = [\n    \"url\" => \"https://microlink.io\",\n    \"screenshot.type\" => \"jpeg\"\n];\n\n$query = http_build_query($params);\n$url = $baseUrl . '?' . $query;\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n    CURLOPT_URL => $url,\n    CURLOPT_RETURNTRANSFER => true,\n    CURLOPT_ENCODING => \"\",\n    CURLOPT_MAXREDIRS => 10,\n    CURLOPT_TIMEOUT => 30,\n    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n    CURLOPT_CUSTOMREQUEST => \"GET\"\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n    echo \"cURL Error #: \" . $err;\n} else {\n    echo $response;\n}",
    "Golang": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/url\"\n    \"io\"\n)\n\nfunc main() {\n    baseURL := \"https://api.microlink.io\"\n\n    u, err := url.Parse(baseURL)\n    if err != nil {\n        panic(err)\n    }\n    q := u.Query()\n    q.Set(\"url\", \"https://microlink.io\")\n    q.Set(\"screenshot.type\", \"jpeg\")\n    u.RawQuery = q.Encode()\n\n    req, err := http.NewRequest(\"GET\", u.String(), nil)\n    if err != nil {\n        panic(err)\n    }\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(string(body))\n}"
  }
}