---
alwaysApply: true
---

# Project Architecture

This is a Gatsby-based React application for Microlink's website. Understanding the architecture is crucial for maintaining consistency.

## Directory Structure

### `/src/components/`

Components are organized hierarchically by complexity and reusability:

- **`elements/`** - Atomic UI components (Button, Box, Input, Text, etc.)
  - These are the building blocks of the UI
  - Should be highly reusable and have minimal dependencies
  - Examples: [Button/Button.js](mdc:src/components/elements/Button/Button.js), [Box.js](mdc:src/components/elements/Box.js)

- **`patterns/`** - Composite components built from elements
  - Combine multiple elements to create reusable patterns
  - More complex than elements but still reusable across pages
  - May have some business logic

- **`pages/`** - Page-specific components
  - Components used only in specific pages
  - Can import from elements and patterns
  - Organized by page directory (home, blog, recipes, payment)

- **`icons/`** - SVG icon components
- **`logos/`** - Brand logo components
- **`hook/`** - Custom React hooks (use-* naming convention)
- **`markdown/`** - MDX components for markdown rendering

### `/src/helpers/`

Utility functions and HOCs:

- Pure utility functions should be simple, single-purpose modules
- **`hoc/`** - Higher-Order Components (with-* naming convention)
  - Examples: [with-container.js](mdc:src/helpers/hoc/with-container.js), [with-analytics.js](mdc:src/helpers/hoc/with-analytics.js)
- **`style/`** - Style-related utilities

### `/src/pages/`

Gatsby page components and markdown content:
- Each file automatically becomes a route
- Markdown files (.md) for documentation and blog posts
- JavaScript files (.js) for dynamic pages

### `/src/templates/`

Gatsby templates for programmatically created pages:
- Used with `gatsby-node.js` to generate pages from data
- Examples: doc template, recipe template

### `/data/`

Static JSON/YAML data files fetched by build scripts:
- Generated by [scripts/fetch-data/](mdc:scripts/fetch-data/index.js)
- Do not manually edit - these are auto-generated

## Component Creation Guidelines

### When creating a new component:

1. **Determine the component level:**
   - Is it a simple UI primitive? → `elements/`
   - Does it combine multiple elements? → `patterns/`
   - Is it page-specific? → `pages/{page-name}/`

2. **Component structure:**
   - Complex components should have their own directory with an index file
   - Simple components can be single files
   - Co-locate related components (e.g., `Button/Button.js`, `Button/Button.stories.js`)

3. **Naming conventions:**
   - Components: PascalCase (e.g., `Button`, `MultiCodeEditor`)
   - Hooks: camelCase with `use` prefix (e.g., `useBreakpoint`, `useTheme`)
   - HOCs: camelCase with `with` prefix (e.g., `withContainer`, `withAnalytics`)
   - Utilities: camelCase (e.g., `formatDate`, `trimMs`)

## Import Order

Follow this import order for consistency:

1. External dependencies (React, styled-components, etc.)
2. Theme/styling imports
3. Components (elements, then patterns)
4. Hooks
5. Helpers/utilities
6. Relative imports

Example from [Button/Button.js](mdc:src/components/elements/Button/Button.js):
```javascript
import { transition, theme as themeProp, colors, space, gradient } from 'theme'
import styled, { css } from 'styled-components'
import Box from '../Box'
import React, { forwardRef } from 'react'
import { withSpinner } from 'helpers/hoc/with-spinner'
import { withAnalytics } from 'helpers/hoc/with-analytics'
```
