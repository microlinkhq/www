---
description: Gatsby-specific patterns and conventions for this project
---

# Gatsby-Specific Conventions

This project uses Gatsby 5 with specific patterns for pages, templates, and data management.

## Configuration Files

### Core Gatsby Files

- [gatsby-config.js](mdc:gatsby-config.js) - Site configuration, plugins, metadata
- [gatsby-node.js](mdc:gatsby-node.js) - Build-time page generation, GraphQL schema
- [gatsby-browser.js](mdc:gatsby-browser.js) - Browser APIs, wrapping root element
- [gatsby-ssr.js](mdc:gatsby-ssr.js) - Server-side rendering APIs
- [src/html.js](mdc:src/html.js) - Custom HTML wrapper

## Pages

### File-System Based Routing

Files in [src/pages/](mdc:src/pages/) automatically become routes:

- `src/pages/index.js` → `/`
- `src/pages/pricing.js` → `/pricing`
- `src/pages/blog/my-post.md` → `/blog/my-post`

### Page Component Structure

```javascript
import React from 'react'
import { Layout } from 'components/patterns/Layout'

const PageName = () => {
  return (
    <Layout>
      {/* Page content */}
    </Layout>
  )
}

export default PageName
```

### Markdown Pages

For documentation and blog posts, use `.md` files:

```markdown
---
title: 'Page Title'
date: '2024-01-01'
---

Content here...
```

Processed by `gatsby-transformer-remark`.

## Templates

Location: [src/templates/](mdc:src/templates/)

Templates are used with `gatsby-node.js` to programmatically create pages:

### Template Structure

```javascript
import React from 'react'

const Template = ({ pageContext }) => {
  const { data } = pageContext

  return (
    <div>
      {/* Use pageContext data */}
    </div>
  )
}

export default Template
```

### Creating Pages in gatsby-node.js

```javascript
exports.createPages = async ({ actions, graphql }) => {
  const { createPage } = actions

  // Query data
  const result = await graphql(`
    query {
      allMarkdownRemark {
        edges {
          node {
            frontmatter {
              slug
            }
          }
        }
      }
    }
  `)

  // Create pages
  result.data.allMarkdownRemark.edges.forEach(({ node }) => {
    createPage({
      path: node.frontmatter.slug,
      component: path.resolve('./src/templates/template.js'),
      context: {
        slug: node.frontmatter.slug
      }
    })
  })
}
```

## Data Management

### Build-Time Data Generation

Data files in [data/](mdc:data/) are generated by build scripts:

1. Scripts in [scripts/fetch-data/](mdc:scripts/fetch-data/) fetch external data
2. Data saved as JSON/YAML in `data/`
3. Gatsby transformers parse the data
4. Query with GraphQL in components

**Important:** Never manually edit files in `data/` - they're auto-generated.

### GraphQL Queries

#### Page Queries

For page components and templates:

```javascript
import { graphql } from 'gatsby'

export const query = graphql`
  query {
    site {
      siteMetadata {
        title
      }
    }
  }
`

const Page = ({ data }) => {
  return <div>{data.site.siteMetadata.title}</div>
}
```

#### Static Queries (Hooks)

For components (not pages):

```javascript
import { useStaticQuery, graphql } from 'gatsby'

export const useSiteMeta = () => {
  const data = useStaticQuery(graphql`
    query {
      site {
        siteMetadata {
          title
        }
      }
    }
  `)
  return data.site.siteMetadata
}
```

See examples: [use-site-meta.js](mdc:src/components/hook/use-site-meta.js)

#### Fragment Co-location

Define GraphQL fragments near related components:

```javascript
export const fragment = graphql`
  fragment HealthcheckData on Query {
    healthcheck {
      status
      uptime
    }
  }
`
```

See examples: [healthcheck-fragment.js](mdc:src/components/hook/healthcheck-fragment.js)

## Build Process

### Development

```bash
npm run dev
# Starts dev server at http://localhost:8000
# GraphQL explorer at http://localhost:8000/___graphql
```

### Build

```bash
npm run build
# 1. Runs `npm run build:data` (fetches external data)
# 2. Builds Gatsby site to `public/`
```

### Clean Build

```bash
npm run clean:build  # Clear Gatsby cache
npm run clean:data   # Clear generated data
npm run clean        # Full clean including node_modules
```

## Plugins

This project uses several Gatsby plugins:

- `gatsby-plugin-styled-components` - Styled-components support
- `gatsby-transformer-remark` - Markdown processing
- `gatsby-transformer-yaml` - YAML data files
- `gatsby-transformer-json` - JSON data files
- `gatsby-plugin-sass` - SCSS support
- `gatsby-plugin-canonical-urls` - SEO
- `gatsby-plugin-advanced-sitemap` - Sitemap generation

Configuration in [gatsby-config.js](mdc:gatsby-config.js)

## Environment Variables

Use [env.js](mdc:env.js) for environment-specific config:

```javascript
// env.js
module.exports = {
  SITE_URL: process.env.SITE_URL || 'https://microlink.io'
}
```

Access in Gatsby config:

```javascript
const env = require('./env')

module.exports = {
  siteMetadata: {
    siteUrl: env.SITE_URL
  }
}
```

## Performance

### Code Splitting

Gatsby automatically code-splits by page. For additional splitting:

```javascript
import React, { lazy, Suspense } from 'react'

const HeavyComponent = lazy(() => import('./HeavyComponent'))

const Page = () => (
  <Suspense fallback={<div>Loading...</div>}>
    <HeavyComponent />
  </Suspense>
)
```

### Image Optimization

For images, use Gatsby's image plugins (if added) or optimize manually before adding to `static/`.

## Common Gotchas

1. **Browser-only code:** Wrap in `typeof window !== 'undefined'` check
2. **Build vs Runtime:** `gatsby-node.js` runs at build time, not in the browser
3. **GraphQL limitations:** Can't use variables in `useStaticQuery`
4. **Module resolution:** Use absolute imports with webpack config in `gatsby-node.js`
